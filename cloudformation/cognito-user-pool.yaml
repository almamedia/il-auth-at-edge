Description: |
    Amazon Cognito User Pool and User Pool Client deployment for Edge Authentication stack
    You will be billed for the AWS resources used if you create a stack from this template. **NOTICE** Copyright 2018 Alma Media Oyj or its affiliates.
    All Rights Reserved. Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance with the License. A copy of the License is located at
    http://www.apache.org/licenses/LICENSE-2.0 or in the "license" file accompanying this file. This file is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and limitations under the License.
Parameters:
  CallbackUrls:
    Description: comma-separated list of URLs that are valid callback URLS for cognito signin and signout operations, ie. where to return user after sign in or out. You can update this list later, just put something here.
    Type: String
Resources:
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: root
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:*
            Resource: arn:aws:logs:*:*:*
          - Effect: Allow
            Action:
            - cognito-idp:CreateUserPool
            - cognito-idp:CreateUserPoolClient
            - cognito-idp:CreateUserPoolDomain
            Resource: 
            - '*'

  CreateUserPoolAndClientFunction: 
    Type: AWS::Lambda::Function
    Properties: 
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.6
      Timeout: 60
      Code: 
        ZipFile: |
            import boto3
            import cfnresponse
            import base64
            def handler(event, context):
                responseData = {}
                cognitoIDPClient = boto3.client('cognito-idp')
                print (str(event)) 
                PoolName ='il-auth-at-edge-userpool'
                ClientName='il-auth-at-edge-userpool-client'
                UserPoolId = ''
                ClientId = ''
                Domain = ''
                try:
                    ResourceIdString = base64.b64decode(event['PhysicalResourceId'])
                    UserPoolId = ResourceIdString.split(':')[0]
                    ClientId = ResourceIdString.split(':')[1]
                    Domain = ResourceIdString.split(':')[2]
                except:
                    # Try to find user pool and client that were created previously and 
                    # not coded to resourceid. This is needed when updating stack that was 
                    # created from earlier version of this project
                    pools = cognitoIDPClient.list_user_pools()
                    for pool in pools['UserPools']:
                        if pool['Name'] == PoolName:
                            UserPoolId = pool['Id']
                            break
                    clients = cognitoIDPClient.list_user_pool_clients()
                    for userpoolclient in clients['UserPoolClients']:
                        if userpoolclients['ClientName'] == ClientName:
                            ClientId = userpoolclient['ClientId']
                            break
                if UserPoolId != '' && ClientId != '':
                    event['RequestType'] = 'Update'
                    customResourcePhysicalId = base64.b64encode(UserPoolId + ':' + ClientId)
                    event['PhysicalResourceId'] = customResourcePhysicalId
                else:
                    responseData['Error'] = 'Could not resolve PhysicalResourceId'
                    cfnresponse.send(event, context, cfnresponse.FAILED, responseData, event['PhysicalResourceId']) 
                    print("FAILED ERROR: " + responseData['Error']) 
                    return
                try: 
                    if event['RequestType'] == 'Create':
                        response = cognitoIDPClient.create_user_pool(
                            AdminCreateUserConfig={
                                'AllowAdminCreateUserOnly': True,
                                'UnusedAccountValidityDays': 7
                            },
                            PoolName=PoolName,
                            AutoVerifiedAttributes=['email'],
                            Schema=[
                                {
                                    'Name': 'email',
                                    'Required': True
                                }
                            ]
                        )
                        CreatedUserPoolId = response['UserPool']['Id']
                        response = cognitoIDPClient.create_user_pool_client(
                            UserPoolId=CreatedUserPoolId,
                            ClientName=ClientName,
                            ReadAttributes=[
                                'address', 'birthdate', 'email', 'email_verified', 'family_name', 'gender', 'given_name', 'locale', 'middle_name', 'name', 'nickname', 'phone_number', 'phone_number_verified', 'picture', 'preferred_username', 'profile', 'updated_at', 'website', 'zoneinfo'
                            ],
                            WriteAttributes=[
                                'address', 'birthdate', 'email', 'family_name', 'gender', 'given_name', 'locale', 'middle_name', 'name', 'nickname', 'phone_number', 'picture', 'preferred_username', 'profile', 'updated_at', 'website', 'zoneinfo'
                            ],
                            SupportedIdentityProviders=['COGNITO'],
                            CallbackURLs=event['ResourceProperties']['CallbackUrls'].split(','),
                            LogoutURLs=event['ResourceProperties']['CallbackUrls'].split(','),
                            AllowedOAuthFlows=['implicit','code'],
                            AllowedOAuthScopes=['aws.cognito.signin.user.admin','openid'],
                            AllowedOAuthFlowsUserPoolClient=True
                        )
                        CreatedClientId = response['UserPoolClient']['ClientId']
                        response = cognitoIDPClient.create_user_pool_domain(
                            Domain = str(CreatedClientId),
                            UserPoolId = CreatedUserPoolId
                        )
                        CreatedDomain = response['CloudFrontDomain']
                        responseData['UserPoolId'] = CreatedUserPoolId
                        responseData['ClientId'] = CreatedClientId
                        customResourcePhysicalId = base64.b64encode(CreatedUserPoolId + ":" + CreatedClientId + ":" + CreatedDomain)
                        print("Create SUCCESS, ResponseData=" + str(responseData))
                        cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData, customResourcePhysicalId)
                    else if event['RequestType'] == 'Update':
                        cognitoIDPClient.update_user_pool_client(
                            UserPoolId=UserPoolId,
                            ClientId=ClientId,
                            ClientName=ClientName,
                            ReadAttributes=[
                                'address', 'birthdate', 'email', 'email_verified', 'family_name', 'gender', 'given_name', 'locale', 'middle_name', 'name', 'nickname', 'phone_number', 'phone_number_verified', 'picture', 'preferred_username', 'profile', 'updated_at', 'website', 'zoneinfo'
                            ],
                            WriteAttributes=[
                                'address', 'birthdate', 'email', 'family_name', 'gender', 'given_name', 'locale', 'middle_name', 'name', 'nickname', 'phone_number', 'picture', 'preferred_username', 'profile', 'updated_at', 'website', 'zoneinfo'
                            ],
                            SupportedIdentityProviders=['COGNITO'],
                            CallbackURLs=event['ResourceProperties']['CallbackUrls'].split(','),
                            LogoutURLs=event['ResourceProperties']['CallbackUrls'].split(','),
                            AllowedOAuthFlows=['implicit','code'],
                            AllowedOAuthScopes=['aws.cognito.signin.user.admin','openid'],
                            AllowedOAuthFlowsUserPoolClient=True
                        )
                        print("Update SUCCESS - responseData=" + str(responseData))
                        cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData, event['PhysicalResourceId'])
                    else if event['RequestType'] == 'Delete':
                        cognitoIDPClient.delete_user_pool_domain(Domain=Domain, UserPoolId=UserPoolId)
                        cognitoIDPClient.delete_user_pool_client(USerPoolId=UserPoolId, ClientId=ClientId)
                        cognitoIDPClient.delete_user_pool(USerPoolId=UserPoolId)
                        print("Delete SUCCESS - responseData=" + str(responseData))
                        cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData, event['PhysicalResourceId'])
                except Exception as e:
                    responseData['Error'] = str(e)
                    cfnresponse.send(event, context, cfnresponse.FAILED, responseData, event['PhysicalResourceId']) 
                    print("FAILED ERROR: " + responseData['Error'])

  CreateUserPoolAndClient:
    Type: Custom::CreateUserPoolAndClient
    DeletionPolicy: Retain
    Properties:
      ServiceToken: !GetAtt CreateUserPoolAndClientFunction.Arn
      CallbackUrls: !Ref CallbackUrls

Outputs:
  UserPoolId:
    Description: generated ID for this UserPool
    Value: !GetAtt CreateUserPoolAndClient.UserPoolId
  UserPoolClientId:
    Description: generated ID for this UserPoolClient
    Value: !GetAtt CreateUserPoolAndClient.ClientId
